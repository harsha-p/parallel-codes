Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler Classic for applications running on Intel(R) 64, Version 2021.2.0 Build 20210228_000000

Compiler options: -qopenmp -qopenmp-simd -Ofast -qopt-report=5 -qopt-report-phase=vec,openmp,par -xCORE-AVX512 -qopt-zmm-usage=high -o release/single_node_512

Begin optimization report for: main(int, char **)

    Report from: OpenMP optimizations [openmp]

OpenMP Construct at src/single_node_512.cpp(65,1) inlined into src/single_node_512.cpp(155,7)
remark #16201: OpenMP DEFINED REGION WAS PARALLELIZED
OpenMP Construct at src/single_node_512.cpp(80,1) inlined into src/single_node_512.cpp(161,7)
remark #16201: OpenMP DEFINED REGION WAS PARALLELIZED
OpenMP Construct at src/single_node_512.cpp(95,1) inlined into src/single_node_512.cpp(167,7)
remark #16201: OpenMP DEFINED REGION WAS PARALLELIZED

    Report from: Vector & Auto-parallelization optimizations [vec, par]


LOOP BEGIN at src/single_node_512.cpp(134,3)
   remark #15388: vectorization support: reference A[i] has aligned access   [ src/single_node_512.cpp(135,5) ]
   remark #15305: vectorization support: vector length 8
   remark #15399: vectorization support: unroll factor set to 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 0.500 
   remark #15478: estimated potential speedup: 11.250 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at src/single_node_512.cpp(134,3)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference A[i] has aligned access   [ src/single_node_512.cpp(135,5) ]
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 0.500 
   remark #15478: estimated potential speedup: 11.250 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at src/single_node_512.cpp(138,3)
   remark #15388: vectorization support: reference B[i] has aligned access   [ src/single_node_512.cpp(139,5) ]
   remark #15305: vectorization support: vector length 8
   remark #15399: vectorization support: unroll factor set to 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 7 
   remark #15477: vector cost: 0.500 
   remark #15478: estimated potential speedup: 13.120 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at src/single_node_512.cpp(138,3)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference B[i] has aligned access   [ src/single_node_512.cpp(139,5) ]
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 7 
   remark #15477: vector cost: 0.500 
   remark #15478: estimated potential speedup: 13.120 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at src/single_node_512.cpp(142,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at src/single_node_512.cpp(142,3)
      remark #15388: vectorization support: reference C[i] has aligned access   [ src/single_node_512.cpp(143,5) ]
      remark #15305: vectorization support: vector length 8
      remark #15300: LOOP WAS VECTORIZED
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 0.370 
      remark #15478: estimated potential speedup: 5.330 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at src/single_node_512.cpp(142,3)
   <Remainder loop for vectorization>
      remark #15388: vectorization support: reference C[i] has aligned access   [ src/single_node_512.cpp(143,5) ]
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 1.222
      remark #15301: REMAINDER LOOP WAS VECTORIZED
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 0.370 
      remark #15478: estimated potential speedup: 5.330 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END

LOOP BEGIN at src/single_node_512.cpp(154,5)
   remark #15382: vectorization support: call to function __kmpc_ok_to_fork cannot be vectorized   [ src/single_node_512.cpp(65,1) ]
   remark #15382: vectorization support: call to function __kmpc_fork_call cannot be vectorized   [ src/single_node_512.cpp(65,1) ]
   remark #15382: vectorization support: call to function __kmpc_serialized_parallel cannot be vectorized   [ src/single_node_512.cpp(65,1) ]
   remark #15382: vectorization support: call to function .0 cannot be vectorized   [ src/single_node_512.cpp(65,1) ]
   remark #15382: vectorization support: call to function __kmpc_end_serialized_parallel cannot be vectorized   [ src/single_node_512.cpp(65,1) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between tile3 (155:7) and tile3 (65:1)
   remark #15346: vector dependence: assumed OUTPUT dependence between tile3 (65:1) and tile3 (155:7)
LOOP END

LOOP BEGIN at src/single_node_512.cpp(160,5)
   remark #15382: vectorization support: call to function __kmpc_ok_to_fork cannot be vectorized   [ src/single_node_512.cpp(80,1) ]
   remark #15382: vectorization support: call to function __kmpc_fork_call cannot be vectorized   [ src/single_node_512.cpp(80,1) ]
   remark #15382: vectorization support: call to function __kmpc_serialized_parallel cannot be vectorized   [ src/single_node_512.cpp(80,1) ]
   remark #15382: vectorization support: call to function .1 cannot be vectorized   [ src/single_node_512.cpp(80,1) ]
   remark #15382: vectorization support: call to function __kmpc_end_serialized_parallel cannot be vectorized   [ src/single_node_512.cpp(80,1) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between tile2 (161:7) and tile2 (80:1)
   remark #15346: vector dependence: assumed OUTPUT dependence between tile2 (80:1) and tile2 (161:7)
LOOP END

LOOP BEGIN at src/single_node_512.cpp(166,5)
   remark #15382: vectorization support: call to function __kmpc_ok_to_fork cannot be vectorized   [ src/single_node_512.cpp(95,1) ]
   remark #15382: vectorization support: call to function __kmpc_fork_call cannot be vectorized   [ src/single_node_512.cpp(95,1) ]
   remark #15382: vectorization support: call to function __kmpc_serialized_parallel cannot be vectorized   [ src/single_node_512.cpp(95,1) ]
   remark #15382: vectorization support: call to function .2 cannot be vectorized   [ src/single_node_512.cpp(95,1) ]
   remark #15382: vectorization support: call to function __kmpc_end_serialized_parallel cannot be vectorized   [ src/single_node_512.cpp(95,1) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between tile1 (167:7) and tile1 (95:1)
   remark #15346: vector dependence: assumed OUTPUT dependence between tile1 (95:1) and tile1 (167:7)
LOOP END

LOOP BEGIN at src/single_node_512.cpp(172,5)
   remark #15382: vectorization support: call to function mat_mult_block(int, double *, double *, double *) cannot be vectorized   [ src/single_node_512.cpp(173,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at src/single_node_512.cpp(184,3)
   remark #15382: vectorization support: call to function printf(const char *, ...) cannot be vectorized   [ src/single_node_512.cpp(186,7) ]
   remark #15382: vectorization support: call to function printf(const char *, ...) cannot be vectorized   [ src/single_node_512.cpp(188,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between call:printf(const char *, ...) (186:7) and call:printf(const char *, ...) (188:5)
   remark #15346: vector dependence: assumed OUTPUT dependence between call:printf(const char *, ...) (188:5) and call:printf(const char *, ...) (186:7)

   LOOP BEGIN at src/single_node_512.cpp(185,5)
      remark #15382: vectorization support: call to function printf(const char *, ...) cannot be vectorized   [ src/single_node_512.cpp(186,7) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
   LOOP END

   LOOP BEGIN at src/single_node_512.cpp(185,5)
   LOOP END

   LOOP BEGIN at src/single_node_512.cpp(185,5)
   LOOP END

   LOOP BEGIN at src/single_node_512.cpp(185,5)
   LOOP END

   LOOP BEGIN at src/single_node_512.cpp(185,5)
   LOOP END

   LOOP BEGIN at src/single_node_512.cpp(185,5)
   LOOP END
LOOP END

LOOP BEGIN at src/single_node_512.cpp(95,1) inlined into src/single_node_512.cpp(167,7)
   remark #15382: vectorization support: call to function tiled_level_2(int, int, double *, double *, double *) cannot be vectorized   [ src/single_node_512.cpp(99,9) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at src/single_node_512.cpp(95,1) inlined into src/single_node_512.cpp(167,7)
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.013
   remark #15300: LOOP WAS VECTORIZED
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 23 
   remark #15477: vector cost: 9.370 
   remark #15478: estimated potential speedup: 2.350 
   remark #15482: vectorized math library calls: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at src/single_node_512.cpp(95,1) inlined into src/single_node_512.cpp(167,7)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.114
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 23 
   remark #15477: vector cost: 9.370 
   remark #15478: estimated potential speedup: 2.350 
   remark #15482: vectorized math library calls: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at src/single_node_512.cpp(80,1) inlined into src/single_node_512.cpp(161,7)
   remark #15382: vectorization support: call to function tiled_level_3(int, int, double *, double *, double *) cannot be vectorized   [ src/single_node_512.cpp(84,9) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at src/single_node_512.cpp(80,1) inlined into src/single_node_512.cpp(161,7)
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.013
   remark #15300: LOOP WAS VECTORIZED
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 23 
   remark #15477: vector cost: 9.370 
   remark #15478: estimated potential speedup: 2.350 
   remark #15482: vectorized math library calls: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at src/single_node_512.cpp(80,1) inlined into src/single_node_512.cpp(161,7)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.114
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 23 
   remark #15477: vector cost: 9.370 
   remark #15478: estimated potential speedup: 2.350 
   remark #15482: vectorized math library calls: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at src/single_node_512.cpp(66,3) inlined into src/single_node_512.cpp(155,7)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between (C+i_n*8)[J] (23:22) and (C+i_n*8+thN*8)[J+8] (57:7)
   remark #15346: vector dependence: assumed FLOW dependence between (C+i_n*8+thN*8)[J+8] (57:7) and (C+i_n*8)[J] (23:22)

   LOOP BEGIN at src/single_node_512.cpp(18,3) inlined into src/single_node_512.cpp(155,7)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between (C+i_n*8)[J] (23:22) and (C+i_n*8+thN*8)[J+8] (57:7)
      remark #15346: vector dependence: assumed FLOW dependence between (C+i_n*8+thN*8)[J+8] (57:7) and (C+i_n*8)[J] (23:22)

      LOOP BEGIN at src/single_node_512.cpp(21,5) inlined into src/single_node_512.cpp(155,7)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed ANTI dependence between (C+i_n*8)[J] (23:22) and (C+i_n*8+thN*8)[J+8] (57:7)
         remark #15346: vector dependence: assumed FLOW dependence between (C+i_n*8+thN*8)[J+8] (57:7) and (C+i_n*8)[J] (23:22)

         LOOP BEGIN at src/single_node_512.cpp(31,7) inlined into src/single_node_512.cpp(155,7)
         <Peeled>
            remark #15344: loop was not vectorized: vector dependence prevents vectorization
            remark #15346: vector dependence: assumed ANTI dependence between c0_0 (38:16) and c0_0 (38:16)
            remark #15346: vector dependence: assumed FLOW dependence between c0_0 (38:16) and c0_0 (38:16)
            remark #15346: vector dependence: assumed FLOW dependence between c0_0 (38:16) and c0_0 (38:16)
            remark #15346: vector dependence: assumed ANTI dependence between c0_0 (38:16) and c0_0 (38:16)
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: tiled_level_2(int, int, double *, double *, double *)

    Report from: OpenMP optimizations [openmp]

OpenMP Construct at src/single_node_512.cpp(80,1)
remark #16201: OpenMP DEFINED REGION WAS PARALLELIZED

    Report from: Vector & Auto-parallelization optimizations [vec, par]


LOOP BEGIN at src/single_node_512.cpp(80,1)
   remark #15382: vectorization support: call to function tiled_level_3(int, int, double *, double *, double *) cannot be vectorized   [ src/single_node_512.cpp(84,9) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at src/single_node_512.cpp(80,1)
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.013
   remark #15300: LOOP WAS VECTORIZED
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 23 
   remark #15477: vector cost: 9.370 
   remark #15478: estimated potential speedup: 2.350 
   remark #15482: vectorized math library calls: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at src/single_node_512.cpp(80,1)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.114
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 23 
   remark #15477: vector cost: 9.370 
   remark #15478: estimated potential speedup: 2.350 
   remark #15482: vectorized math library calls: 1 
   remark #15488: --- end vector cost summary ---
LOOP END
===========================================================================

Begin optimization report for: tiled_level_3(int, int, double *, double *, double *)

    Report from: OpenMP optimizations [openmp]

OpenMP Construct at src/single_node_512.cpp(65,1)
remark #16201: OpenMP DEFINED REGION WAS PARALLELIZED

    Report from: Vector & Auto-parallelization optimizations [vec, par]


LOOP BEGIN at src/single_node_512.cpp(66,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between (C+i_n*8)[J] (23:22) and (C+i_n*8+thN*8)[J+8] (57:7)
   remark #15346: vector dependence: assumed FLOW dependence between (C+i_n*8+thN*8)[J+8] (57:7) and (C+i_n*8)[J] (23:22)

   LOOP BEGIN at src/single_node_512.cpp(18,3) inlined into src/single_node_512.cpp(69,9)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between (C+i_n*8)[J] (23:22) and (C+i_n*8+thN*8)[J+8] (57:7)
      remark #15346: vector dependence: assumed FLOW dependence between (C+i_n*8+thN*8)[J+8] (57:7) and (C+i_n*8)[J] (23:22)

      LOOP BEGIN at src/single_node_512.cpp(21,5) inlined into src/single_node_512.cpp(69,9)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed ANTI dependence between (C+i_n*8)[J] (23:22) and (C+i_n*8+thN*8)[J+8] (57:7)
         remark #15346: vector dependence: assumed FLOW dependence between (C+i_n*8+thN*8)[J+8] (57:7) and (C+i_n*8)[J] (23:22)

         LOOP BEGIN at src/single_node_512.cpp(31,7) inlined into src/single_node_512.cpp(69,9)
         <Peeled>
            remark #15344: loop was not vectorized: vector dependence prevents vectorization
            remark #15346: vector dependence: assumed ANTI dependence between c0_0 (38:16) and c0_0 (38:16)
            remark #15346: vector dependence: assumed FLOW dependence between c0_0 (38:16) and c0_0 (38:16)
            remark #15346: vector dependence: assumed FLOW dependence between c0_0 (38:16) and c0_0 (38:16)
            remark #15346: vector dependence: assumed ANTI dependence between c0_0 (38:16) and c0_0 (38:16)
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: mat_mult_block(int, double *, double *, double *)

    Report from: Vector & Auto-parallelization optimizations [vec, par]


LOOP BEGIN at src/single_node_512.cpp(18,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between (C+i_n*8)[J] (23:22) and (C+i_n*8+thN*8)[J+8] (57:7)
   remark #15346: vector dependence: assumed FLOW dependence between (C+i_n*8+thN*8)[J+8] (57:7) and (C+i_n*8)[J] (23:22)

   LOOP BEGIN at src/single_node_512.cpp(21,5)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between (C+i_n*8)[J] (23:22) and (C+i_n*8+thN*8)[J+8] (57:7)
      remark #15346: vector dependence: assumed FLOW dependence between (C+i_n*8+thN*8)[J+8] (57:7) and (C+i_n*8)[J] (23:22)

      LOOP BEGIN at src/single_node_512.cpp(31,7)
      <Peeled>
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed ANTI dependence between c0_0 (38:16) and c0_0 (38:16)
         remark #15346: vector dependence: assumed FLOW dependence between c0_0 (38:16) and c0_0 (38:16)
         remark #15346: vector dependence: assumed FLOW dependence between c0_0 (38:16) and c0_0 (38:16)
         remark #15346: vector dependence: assumed ANTI dependence between c0_0 (38:16) and c0_0 (38:16)
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: tiled_level_1(int, int, int, int, double *, double *, double *)

    Report from: OpenMP optimizations [openmp]

OpenMP Construct at src/single_node_512.cpp(95,1)
remark #16201: OpenMP DEFINED REGION WAS PARALLELIZED

    Report from: Vector & Auto-parallelization optimizations [vec, par]


LOOP BEGIN at src/single_node_512.cpp(95,1)
   remark #15382: vectorization support: call to function tiled_level_2(int, int, double *, double *, double *) cannot be vectorized   [ src/single_node_512.cpp(99,9) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at src/single_node_512.cpp(95,1)
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.013
   remark #15300: LOOP WAS VECTORIZED
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 23 
   remark #15477: vector cost: 9.370 
   remark #15478: estimated potential speedup: 2.350 
   remark #15482: vectorized math library calls: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at src/single_node_512.cpp(95,1)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.114
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 23 
   remark #15477: vector cost: 9.370 
   remark #15478: estimated potential speedup: 2.350 
   remark #15482: vectorized math library calls: 1 
   remark #15488: --- end vector cost summary ---
LOOP END
===========================================================================
