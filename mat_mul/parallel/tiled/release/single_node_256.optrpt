Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler Classic for applications running on Intel(R) 64, Version 2021.2.0 Build 20210228_000000

Compiler options: -qopenmp -qopenmp-simd -Ofast -qopt-report=5 -qopt-report-phase=vec,openmp,par -xCORE-AVX2 -o release/single_node_256

Begin optimization report for: main(int, char **)

    Report from: Vector & Auto-parallelization optimizations [vec, par]


LOOP BEGIN at src/single_node_256.cpp(153,3)
   remark #15388: vectorization support: reference A[i] has aligned access   [ src/single_node_256.cpp(154,5) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 1.000 
   remark #15478: estimated potential speedup: 5.620 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at src/single_node_256.cpp(153,3)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference A[i] has aligned access   [ src/single_node_256.cpp(154,5) ]
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 2.500
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 1.000 
   remark #15478: estimated potential speedup: 5.620 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at src/single_node_256.cpp(153,3)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at src/single_node_256.cpp(157,3)
   remark #15388: vectorization support: reference B[i] has aligned access   [ src/single_node_256.cpp(158,5) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 7 
   remark #15477: vector cost: 1.000 
   remark #15478: estimated potential speedup: 6.480 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at src/single_node_256.cpp(157,3)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference B[i] has aligned access   [ src/single_node_256.cpp(158,5) ]
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 2.500
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 7 
   remark #15477: vector cost: 1.000 
   remark #15478: estimated potential speedup: 6.480 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at src/single_node_256.cpp(157,3)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at src/single_node_256.cpp(161,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at src/single_node_256.cpp(161,3)
      remark #15388: vectorization support: reference C[i] has aligned access   [ src/single_node_256.cpp(162,5) ]
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15300: LOOP WAS VECTORIZED
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 1.500 
      remark #15478: estimated potential speedup: 2.660 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at src/single_node_256.cpp(161,3)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at src/single_node_256.cpp(172,5)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at src/single_node_256.cpp(90,3) inlined into src/single_node_256.cpp(173,7)
      remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

      LOOP BEGIN at src/single_node_256.cpp(91,5) inlined into src/single_node_256.cpp(173,7)
         remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

         LOOP BEGIN at src/single_node_256.cpp(92,7) inlined into src/single_node_256.cpp(173,7)
            remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

            LOOP BEGIN at src/single_node_256.cpp(19,3) inlined into src/single_node_256.cpp(173,7)
               remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

               LOOP BEGIN at src/single_node_256.cpp(20,5) inlined into src/single_node_256.cpp(173,7)
                  remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

                  LOOP BEGIN at src/single_node_256.cpp(37,7) inlined into src/single_node_256.cpp(173,7)
                     remark #15344: loop was not vectorized: vector dependence prevents vectorization
                     remark #15346: vector dependence: assumed ANTI dependence between c0_0 (47:16) and c0_0 (47:16)
                     remark #15346: vector dependence: assumed FLOW dependence between c0_0 (47:16) and c0_0 (47:16)
                     remark #15346: vector dependence: assumed ANTI dependence between c0_0 (47:16) and c0_0 (47:16)
                  LOOP END
               LOOP END
            LOOP END
         LOOP END
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at src/single_node_256.cpp(103,3) inlined into src/single_node_256.cpp(179,7)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at src/single_node_256.cpp(104,5) inlined into src/single_node_256.cpp(179,7)
      remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

      LOOP BEGIN at src/single_node_256.cpp(105,7) inlined into src/single_node_256.cpp(179,7)
         remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

         LOOP BEGIN at src/single_node_256.cpp(90,3) inlined into src/single_node_256.cpp(179,7)
            remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

            LOOP BEGIN at src/single_node_256.cpp(91,5) inlined into src/single_node_256.cpp(179,7)
               remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

               LOOP BEGIN at src/single_node_256.cpp(92,7) inlined into src/single_node_256.cpp(179,7)
                  remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

                  LOOP BEGIN at src/single_node_256.cpp(19,3) inlined into src/single_node_256.cpp(179,7)
                     remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

                     LOOP BEGIN at src/single_node_256.cpp(20,5) inlined into src/single_node_256.cpp(179,7)
                        remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

                        LOOP BEGIN at src/single_node_256.cpp(37,7) inlined into src/single_node_256.cpp(179,7)
                           remark #15344: loop was not vectorized: vector dependence prevents vectorization
                           remark #15346: vector dependence: assumed ANTI dependence between c0_0 (47:16) and c0_0 (47:16)
                           remark #15346: vector dependence: assumed FLOW dependence between c0_0 (47:16) and c0_0 (47:16)
                           remark #15346: vector dependence: assumed ANTI dependence between c0_0 (47:16) and c0_0 (47:16)
                        LOOP END
                     LOOP END
                  LOOP END
               LOOP END
            LOOP END
         LOOP END
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at src/single_node_256.cpp(116,3) inlined into src/single_node_256.cpp(185,7)
   remark #15382: vectorization support: call to function mat_mult_block(int, double *, double *, double *) cannot be vectorized   [ src/single_node_256.cpp(93,9) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between call:mat_mult_block(int, double *, double *, double *) (93:9) and call:mat_mult_block(int, double *, double *, double *) (93:9)
   remark #15346: vector dependence: assumed OUTPUT dependence between call:mat_mult_block(int, double *, double *, double *) (93:9) and call:mat_mult_block(int, double *, double *, double *) (93:9)

   LOOP BEGIN at src/single_node_256.cpp(117,5) inlined into src/single_node_256.cpp(185,7)
      remark #15382: vectorization support: call to function mat_mult_block(int, double *, double *, double *) cannot be vectorized   [ src/single_node_256.cpp(93,9) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between call:mat_mult_block(int, double *, double *, double *) (93:9) and call:mat_mult_block(int, double *, double *, double *) (93:9)
      remark #15346: vector dependence: assumed OUTPUT dependence between call:mat_mult_block(int, double *, double *, double *) (93:9) and call:mat_mult_block(int, double *, double *, double *) (93:9)

      LOOP BEGIN at src/single_node_256.cpp(118,7) inlined into src/single_node_256.cpp(185,7)
         remark #15382: vectorization support: call to function mat_mult_block(int, double *, double *, double *) cannot be vectorized   [ src/single_node_256.cpp(93,9) ]
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed OUTPUT dependence between call:mat_mult_block(int, double *, double *, double *) (93:9) and call:mat_mult_block(int, double *, double *, double *) (93:9)
         remark #15346: vector dependence: assumed OUTPUT dependence between call:mat_mult_block(int, double *, double *, double *) (93:9) and call:mat_mult_block(int, double *, double *, double *) (93:9)

         LOOP BEGIN at src/single_node_256.cpp(103,3) inlined into src/single_node_256.cpp(185,7)
            remark #15382: vectorization support: call to function mat_mult_block(int, double *, double *, double *) cannot be vectorized   [ src/single_node_256.cpp(93,9) ]
            remark #15344: loop was not vectorized: vector dependence prevents vectorization
            remark #15346: vector dependence: assumed OUTPUT dependence between call:mat_mult_block(int, double *, double *, double *) (93:9) and call:mat_mult_block(int, double *, double *, double *) (93:9)
            remark #15346: vector dependence: assumed OUTPUT dependence between call:mat_mult_block(int, double *, double *, double *) (93:9) and call:mat_mult_block(int, double *, double *, double *) (93:9)

            LOOP BEGIN at src/single_node_256.cpp(104,5) inlined into src/single_node_256.cpp(185,7)
               remark #15382: vectorization support: call to function mat_mult_block(int, double *, double *, double *) cannot be vectorized   [ src/single_node_256.cpp(93,9) ]
               remark #15344: loop was not vectorized: vector dependence prevents vectorization
               remark #15346: vector dependence: assumed OUTPUT dependence between call:mat_mult_block(int, double *, double *, double *) (93:9) and call:mat_mult_block(int, double *, double *, double *) (93:9)
               remark #15346: vector dependence: assumed OUTPUT dependence between call:mat_mult_block(int, double *, double *, double *) (93:9) and call:mat_mult_block(int, double *, double *, double *) (93:9)

               LOOP BEGIN at src/single_node_256.cpp(105,7) inlined into src/single_node_256.cpp(185,7)
                  remark #15382: vectorization support: call to function mat_mult_block(int, double *, double *, double *) cannot be vectorized   [ src/single_node_256.cpp(93,9) ]
                  remark #15344: loop was not vectorized: vector dependence prevents vectorization
                  remark #15346: vector dependence: assumed OUTPUT dependence between call:mat_mult_block(int, double *, double *, double *) (93:9) and call:mat_mult_block(int, double *, double *, double *) (93:9)
                  remark #15346: vector dependence: assumed OUTPUT dependence between call:mat_mult_block(int, double *, double *, double *) (93:9) and call:mat_mult_block(int, double *, double *, double *) (93:9)

                  LOOP BEGIN at src/single_node_256.cpp(90,3) inlined into src/single_node_256.cpp(185,7)
                     remark #15382: vectorization support: call to function mat_mult_block(int, double *, double *, double *) cannot be vectorized   [ src/single_node_256.cpp(93,9) ]
                     remark #15344: loop was not vectorized: vector dependence prevents vectorization
                     remark #15346: vector dependence: assumed OUTPUT dependence between call:mat_mult_block(int, double *, double *, double *) (93:9) and call:mat_mult_block(int, double *, double *, double *) (93:9)
                     remark #15346: vector dependence: assumed OUTPUT dependence between call:mat_mult_block(int, double *, double *, double *) (93:9) and call:mat_mult_block(int, double *, double *, double *) (93:9)

                     LOOP BEGIN at src/single_node_256.cpp(91,5) inlined into src/single_node_256.cpp(185,7)
                        remark #15382: vectorization support: call to function mat_mult_block(int, double *, double *, double *) cannot be vectorized   [ src/single_node_256.cpp(93,9) ]
                        remark #15344: loop was not vectorized: vector dependence prevents vectorization
                        remark #15346: vector dependence: assumed OUTPUT dependence between call:mat_mult_block(int, double *, double *, double *) (93:9) and call:mat_mult_block(int, double *, double *, double *) (93:9)
                        remark #15346: vector dependence: assumed OUTPUT dependence between call:mat_mult_block(int, double *, double *, double *) (93:9) and call:mat_mult_block(int, double *, double *, double *) (93:9)

                        LOOP BEGIN at src/single_node_256.cpp(92,7) inlined into src/single_node_256.cpp(185,7)
                           remark #15382: vectorization support: call to function mat_mult_block(int, double *, double *, double *) cannot be vectorized   [ src/single_node_256.cpp(93,9) ]
                           remark #15344: loop was not vectorized: vector dependence prevents vectorization
                        LOOP END
                     LOOP END
                  LOOP END
               LOOP END
            LOOP END
         LOOP END
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at src/single_node_256.cpp(190,5)
   remark #15382: vectorization support: call to function mat_mult_block(int, double *, double *, double *) cannot be vectorized   [ src/single_node_256.cpp(191,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at src/single_node_256.cpp(202,3)
   remark #15382: vectorization support: call to function printf(const char *, ...) cannot be vectorized   [ src/single_node_256.cpp(204,7) ]
   remark #15382: vectorization support: call to function printf(const char *, ...) cannot be vectorized   [ src/single_node_256.cpp(206,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between call:printf(const char *, ...) (204:7) and call:printf(const char *, ...) (206:5)
   remark #15346: vector dependence: assumed OUTPUT dependence between call:printf(const char *, ...) (206:5) and call:printf(const char *, ...) (204:7)

   LOOP BEGIN at src/single_node_256.cpp(203,5)
      remark #15382: vectorization support: call to function printf(const char *, ...) cannot be vectorized   [ src/single_node_256.cpp(204,7) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
   LOOP END

   LOOP BEGIN at src/single_node_256.cpp(203,5)
   LOOP END

   LOOP BEGIN at src/single_node_256.cpp(203,5)
   LOOP END

   LOOP BEGIN at src/single_node_256.cpp(203,5)
   LOOP END

   LOOP BEGIN at src/single_node_256.cpp(203,5)
   LOOP END

   LOOP BEGIN at src/single_node_256.cpp(203,5)
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at src/single_node_256.cpp(178,5)
   remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at src/single_node_256.cpp(184,5)
   remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification
LOOP END
===========================================================================

Begin optimization report for: mat_mult_block(int, double *, double *, double *)

    Report from: Vector & Auto-parallelization optimizations [vec, par]


LOOP BEGIN at src/single_node_256.cpp(19,3)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at src/single_node_256.cpp(20,5)
      remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

      LOOP BEGIN at src/single_node_256.cpp(37,7)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed ANTI dependence between c0_0 (47:16) and c0_0 (47:16)
         remark #15346: vector dependence: assumed FLOW dependence between c0_0 (47:16) and c0_0 (47:16)
         remark #15346: vector dependence: assumed ANTI dependence between c0_0 (47:16) and c0_0 (47:16)
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: tiled_level_3(int, int, double *, double *, double *)

    Report from: Vector & Auto-parallelization optimizations [vec, par]


LOOP BEGIN at src/single_node_256.cpp(90,3)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at src/single_node_256.cpp(91,5)
      remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

      LOOP BEGIN at src/single_node_256.cpp(92,7)
         remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

         LOOP BEGIN at src/single_node_256.cpp(19,3) inlined into src/single_node_256.cpp(93,9)
            remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

            LOOP BEGIN at src/single_node_256.cpp(20,5) inlined into src/single_node_256.cpp(93,9)
               remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

               LOOP BEGIN at src/single_node_256.cpp(37,7) inlined into src/single_node_256.cpp(93,9)
                  remark #15344: loop was not vectorized: vector dependence prevents vectorization
                  remark #15346: vector dependence: assumed ANTI dependence between c0_0 (47:16) and c0_0 (47:16)
                  remark #15346: vector dependence: assumed FLOW dependence between c0_0 (47:16) and c0_0 (47:16)
                  remark #15346: vector dependence: assumed ANTI dependence between c0_0 (47:16) and c0_0 (47:16)
               LOOP END
            LOOP END
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: tiled_level_2(int, int, double *, double *, double *)

    Report from: Vector & Auto-parallelization optimizations [vec, par]


LOOP BEGIN at src/single_node_256.cpp(103,3)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at src/single_node_256.cpp(104,5)
      remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

      LOOP BEGIN at src/single_node_256.cpp(105,7)
         remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

         LOOP BEGIN at src/single_node_256.cpp(90,3) inlined into src/single_node_256.cpp(106,9)
            remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

            LOOP BEGIN at src/single_node_256.cpp(91,5) inlined into src/single_node_256.cpp(106,9)
               remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

               LOOP BEGIN at src/single_node_256.cpp(92,7) inlined into src/single_node_256.cpp(106,9)
                  remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

                  LOOP BEGIN at src/single_node_256.cpp(19,3) inlined into src/single_node_256.cpp(106,9)
                     remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

                     LOOP BEGIN at src/single_node_256.cpp(20,5) inlined into src/single_node_256.cpp(106,9)
                        remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

                        LOOP BEGIN at src/single_node_256.cpp(37,7) inlined into src/single_node_256.cpp(106,9)
                           remark #15344: loop was not vectorized: vector dependence prevents vectorization
                           remark #15346: vector dependence: assumed ANTI dependence between c0_0 (47:16) and c0_0 (47:16)
                           remark #15346: vector dependence: assumed FLOW dependence between c0_0 (47:16) and c0_0 (47:16)
                           remark #15346: vector dependence: assumed ANTI dependence between c0_0 (47:16) and c0_0 (47:16)
                        LOOP END
                     LOOP END
                  LOOP END
               LOOP END
            LOOP END
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: tiled_level_1(int, int, int, int, double *, double *, double *)

    Report from: Vector & Auto-parallelization optimizations [vec, par]


LOOP BEGIN at src/single_node_256.cpp(103,3) inlined into src/single_node_256.cpp(119,9)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at src/single_node_256.cpp(104,5) inlined into src/single_node_256.cpp(119,9)
      remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

      LOOP BEGIN at src/single_node_256.cpp(105,7) inlined into src/single_node_256.cpp(119,9)
         remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

         LOOP BEGIN at src/single_node_256.cpp(90,3) inlined into src/single_node_256.cpp(119,9)
            remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

            LOOP BEGIN at src/single_node_256.cpp(91,5) inlined into src/single_node_256.cpp(119,9)
               remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

               LOOP BEGIN at src/single_node_256.cpp(92,7) inlined into src/single_node_256.cpp(119,9)
                  remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

                  LOOP BEGIN at src/single_node_256.cpp(19,3) inlined into src/single_node_256.cpp(119,9)
                     remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

                     LOOP BEGIN at src/single_node_256.cpp(20,5) inlined into src/single_node_256.cpp(119,9)
                        remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

                        LOOP BEGIN at src/single_node_256.cpp(37,7) inlined into src/single_node_256.cpp(119,9)
                           remark #15344: loop was not vectorized: vector dependence prevents vectorization
                           remark #15346: vector dependence: assumed ANTI dependence between c0_0 (47:16) and c0_0 (47:16)
                           remark #15346: vector dependence: assumed FLOW dependence between c0_0 (47:16) and c0_0 (47:16)
                           remark #15346: vector dependence: assumed ANTI dependence between c0_0 (47:16) and c0_0 (47:16)
                        LOOP END
                     LOOP END
                  LOOP END
               LOOP END
            LOOP END
         LOOP END
      LOOP END
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at src/single_node_256.cpp(116,3)
   remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification

   LOOP BEGIN at src/single_node_256.cpp(117,5)
      remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification

      LOOP BEGIN at src/single_node_256.cpp(118,7)
         remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification
      LOOP END
   LOOP END
LOOP END
===========================================================================
